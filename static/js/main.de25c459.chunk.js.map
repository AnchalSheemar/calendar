{"version":3,"sources":["components/Calendar.js","App.js","reportWebVitals.js","index.js"],"names":["Calendar","state","currentMonth","Date","selectedDate","onDateClick","day","setState","nextMonth","dateFns","prevMonth","nextYear","prevYear","className","onClick","this","days","startDate","i","push","monthStart","monthEnd","endDate","rows","formattedDate","cloneDay","renderHeader","renderDays","renderCells","React","Component","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de25c459.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as dateFns from \"date-fns\";\r\n\r\nclass Calendar extends React.Component {\r\n  state = {\r\n    currentMonth: new Date(),\r\n    selectedDate: new Date()\r\n  };\r\n\r\n  renderHeader() {\r\n    const dateFormat = \"MMMM yyyy\";\r\n\r\n    return (\r\n      <div className=\"header row flex-middle\">\r\n            <div className=\"col col-start\">\r\n          <div className=\"icon\" onClick={this.prevYear}>\r\n            chevron_leftchevron_left\r\n          </div>\r\n        </div>\r\n        <div className=\"col col-start\">\r\n          <div className=\"icon\" onClick={this.prevMonth}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n      \r\n        <div className=\"col col-center\">\r\n          <span>{dateFns.format(this.state.currentMonth, dateFormat)}</span>\r\n        </div>\r\n        <div className=\"col col-end\" onClick={this.nextMonth}>\r\n          <div className=\"icon\">chevron_right</div>\r\n        </div>\r\n        <div className=\"col col-end\" onClick={this.nextYear}>\r\n          <div className=\"icon\">chevron_rightchevron_right</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderDays() {\r\n    const dateFormat = \"dddd\";\r\n    const days = [];\r\n\r\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\r\n \r\n    for (let i = 0; i < 7; i++) {\r\n      days.push(\r\n        <div className=\"col col-center\" key={i}>\r\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n        </div>\r\n      );\r\n    } \r\n\r\n    return <div className=\"days row\">{days}</div>;\r\n  }\r\n\r\n  renderCells() {\r\n    const { currentMonth, selectedDate } = this.state;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart);\r\n    const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n    const dateFormat = \"d\";\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n       const cloneDay = day;\r\n        days.push(\r\n          <div\r\n            className={`col cell ${\r\n              !dateFns.isSameMonth(day, monthStart)\r\n                ? \"disabled\"\r\n                : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"\r\n            }`}\r\n            key={day}\r\n            onClick={() => this.onDateClick(dateFns.parseISO(cloneDay))}\r\n          >\r\n            <span className=\"number\">{formattedDate}</span>\r\n            <span className=\"bg\">{formattedDate}</span>\r\n          </div>\r\n        );\r\n        day = dateFns.addDays(day, 1);\r\n      }\r\n      rows.push(\r\n        <div className=\"row\" key={day}>\r\n          {days}\r\n        </div>\r\n      );\r\n      days = [];\r\n    }\r\n    return <div className=\"body\">{rows}</div>;\r\n  }\r\n\r\n  onDateClick = day => {\r\n    this.setState({\r\n      selectedDate: day\r\n    });\r\n  };\r\n\r\n  nextMonth = () => {\r\n    this.setState({\r\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\r\n    });\r\n  };\r\n\r\n  prevMonth = () => {\r\n    this.setState({\r\n      currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\r\n    });\r\n  };\r\n\r\n  nextYear = () => {\r\n    this.setState({\r\n        currentMonth: dateFns.addYears(this.state.currentMonth, 1)\r\n    });\r\n  };\r\n  prevYear = () => {\r\n    this.setState({\r\n        currentMonth: dateFns.subYears(this.state.currentMonth, 1)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calendar\">\r\n        {this.renderHeader()}\r\n        {this.renderDays()}\r\n        {this.renderCells()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendar;\r\n","import React from \"react\";\n\nimport Calendar from \"./components/Calendar\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div id=\"logo\">\n            <span className=\"icon\">date_range</span>\n            <span>\n              react<b>calendar</b>\n            </span>\n          </div>\n        </header>\n        <main>\n          <Calendar />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}